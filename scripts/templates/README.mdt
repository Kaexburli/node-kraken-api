# node-kraken-api

[![NPM](https://nodei.co/npm/node-kraken-api.png)](https://nodei.co/npm/node-kraken-api/)

___{alias:node-kraken-api/description}___

## Getting Started

### Prerequisites

Node.JS version ___{alias:node-kraken-api/node}___ or above.

### Installing

```console
npm i node-kraken-api
```

### Testing

The following command will test the package for errors. Testing provided by jest library. Testing may take several minutes to complete.

___Note:___ In order for authenticated testing to occur, a valid auth.json file must be available in the root directory of the package. Please see the [configuration](#configuration) instructions below. An empty auth.json file has been provided; please fill the 'key', 'secret', and 'tier' properties accordingly.

__Modifying the provided auth.json for authenticated testing (use a read-only key to be safe!):__

_NOTE: replace 'nano' with your preferred editor._
```console
nano /path/to/node_modules/node-kraken-api/auth.json
```

__Installing the jest library:__
```console
npm i --prefix /path/to/node_modules/node-kraken-api jest
```

__Running the testing scripts:__

```console
npm test --prefix /path/to/node_modules/node-kraken-api
```

### Deployment

__Loading the module:__
```js
const kraken = require('node-kraken-api')
```

__Public client instantiation:__
```js
const api = kraken()
```

__Private client instantiation (with authenticated [configuration](#configuration)):__
```js
const api = kraken(require('./auth.json'))
```

Or:

```js
const api = kraken({ key: '****', secret: '****', tier: '****' })
```

__Instantiation with any number of configuration settings (see [configuration](#configuration)):__
```js
const api = kraken(require('./config.json'))
```

Or:

```js
const api = kraken(require('./config.js'))
```

Or:

```js
const api = kraken({ key: '****', secret: '****', tier: '****', parse: { dates: false } })
```

### Usage

__Making a single call:__

_Using promises:_
```js
api.call('Time').then(
  data => console.log(data)
).catch(
  err => console.error(err)
)
```

_Using callbacks:_
```js
api.call('Time', (err, data) => {
  if (err) {
    console.error(err)
  } else {
    console.log(data)
  }
})
```

_Using promises (with Kraken method options):_
```js
api.call('Depth', { pair: 'XXBTZUSD', count: 1 }).then(
  data => console.log(data)
).catch(
  err => console.error(err)
)
```

_Using callbacks (with Kraken method options):_
```js
api.call('Depth', { pair: 'XXBTZUSD', count: 1 }, (err, data) => {
  if (err) {
    console.error(err)
  } else {
    console.log(data)
  }
})
```

__Working with data syncing:__

_Creating a sync object:_
```js
const timeSync = api.sync('Time')
// logs {}
console.log(timeSync.data)

// logs { unixtime: 1528607559000, rfc1123: 1528607559000 }
setTimeout(() => console.log(timeSync.data), 5000)
```

_Creating a sync object (using a listener callback):_
```js
const timeSync = api.sync('Time', (err, data, event) => {
  if (err) console.error(err)
  else if (data) console.log(data)
}
```

_Adding a listener after creation:_
```js
const timeSync = api.sync('Time')
timeSync.addListener((err, data, event) => {
  if (err) console.error(err)
  else if (data) console.log(data)
})
```

_Closing a sync operation:_
```js
const timeSync = api.sync('Time')
timeSync.addListener((err, data, event) => {
  if (err) console.error(err)
  else if (data) console.log(data)
  else if (event === 'close') {
    // logs after ~5000 ms
    console.log('Stopped syncing!')
  }
})
setTimeout(timeSync.close, 5000)
```

_Re-opening a sync operation:_
```js
const timeSync = api.sync('Time')
timeSync.addListener((err, data, event) => {
  if (err) console.error(err)
  else if (data) console.log(data)
  else if (event === 'close') {
    // logs after ~5000 ms
    console.log('Stopped syncing!')
    setTimeout(timeSync.open, 5000)
  } else if (event === 'open') {
    // logs after ~10000 ms
    console.log('Resumed syncing!')
  }
})
setTimeout(timeSync.close, 5000)
```

_Removing a sync listener:_
```js
const timeSync = api.sync('Time')
const listener = (err, data, event) => {
  // stops executing after ~5000 ms
  if (err) console.error(err)
  else if (data) console.log(data)
}
timeSync.addListener(listener)
setTimeout(() => timeSync.removeListener(listener), 5000)
```

_Viewing historical errors:_
```js
const timeSync = api.sync('Tidme')
setTimeout
```


<a name='configuration'></a>
## Configuration

During creation of the API instance, a configuration object may be provided for authenticated calls and other options. This may be provided by using <code>require('./config.js')</code> or <code>require('./config.json')</code> if this file has been prepared already, or by simply providing an object programmatically.

Configuration specifications are detailed in the documentation [here](https://github.com/jpcx/node-kraken-api/blob/___{alias:node-kraken-api/tag}___/docs/namespaces/Settings.md#~Config)

## Documentation

### See:
___{file:docs/modules/node-kraken-api.md___split-gm:^<hr>\n\n## \[Home\]\(.*$\n([\s\S]+)}___


## Versioning

Versioned using [SemVer](http://semver.org/). For available versions, see the [Changelog](https://github.com/jpcx/node-kraken-api/blob/___{alias:node-kraken-api/tag}___/CHANGELOG.md).

## Contribution

Please raise an issue if you find any. Pull requests are welcome!

## Author

  + **Justin Collier** - [jpcx](https://github.com/jpcx)

## License

This project is licensed under the MIT License - see the [LICENSE](https://github.com/jpcx/node-kraken-api/blob/___{alias:node-kraken-api/tag}___/LICENSE) file for details